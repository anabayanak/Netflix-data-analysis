{"cells":[{"cell_type":"code","source":["import numpy as np\n","import pandas as pd\n","import matplotlib.pyplot as plt\n","import seaborn as sns\n","\n","Netflix = pd.read_csv('netflix.csv')"],"metadata":{"id":"ydC6aWDMT6iF"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["1.Defining Problem Statement and Analysing basic metrics\n","\n","we need to find the solution on which country Netflix need to produce and what type of movies to produce to grow their business\n"],"metadata":{"id":"hwLshrgaUc0b"}},{"cell_type":"code","source":["Netflix.head()"],"metadata":{"id":"Sjffgf5XUV1A","executionInfo":{"status":"ok","timestamp":1744198268761,"user_tz":-330,"elapsed":6,"user":{"displayName":"","userId":""}},"outputId":"5f843fb6-2757-4f6c-8a6b-4966e2735676","colab":{"base_uri":"https://localhost:8080/","height":327}},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["  show_id     type                  title         director  \\\n","0      s1    Movie   Dick Johnson Is Dead  Kirsten Johnson   \n","1      s2  TV Show          Blood & Water              NaN   \n","2      s3  TV Show              Ganglands  Julien Leclercq   \n","3      s4  TV Show  Jailbirds New Orleans              NaN   \n","4      s5  TV Show           Kota Factory              NaN   \n","\n","                                                cast        country  \\\n","0                                                NaN  United States   \n","1  Ama Qamata, Khosi Ngema, Gail Mabalane, Thaban...   South Africa   \n","2  Sami Bouajila, Tracy Gotoas, Samuel Jouy, Nabi...            NaN   \n","3                                                NaN            NaN   \n","4  Mayur More, Jitendra Kumar, Ranjan Raj, Alam K...          India   \n","\n","           date_added  release_year rating   duration  \\\n","0  September 25, 2021        2020.0  PG-13     90 min   \n","1  September 24, 2021        2021.0  TV-MA  2 Seasons   \n","2  September 24, 2021        2021.0  TV-MA   1 Season   \n","3  September 24, 2021        2021.0  TV-MA   1 Season   \n","4  September 24, 2021        2021.0  TV-MA  2 Seasons   \n","\n","                                           listed_in  \\\n","0                                      Documentaries   \n","1    International TV Shows, TV Dramas, TV Mysteries   \n","2  Crime TV Shows, International TV Shows, TV Act...   \n","3                             Docuseries, Reality TV   \n","4  International TV Shows, Romantic TV Shows, TV ...   \n","\n","                                         description  \n","0  As her father nears the end of his life, filmm...  \n","1  After crossing paths at a party, a Cape Town t...  \n","2  To protect his family from a powerful drug lor...  \n","3  Feuds, flirtations and toilet talk go down amo...  \n","4  In a city of coaching centers known to train I...  "],"text/html":["\n","  <div id=\"df-31bce279-baa6-44b2-acb7-3892464b286a\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>show_id</th>\n","      <th>type</th>\n","      <th>title</th>\n","      <th>director</th>\n","      <th>cast</th>\n","      <th>country</th>\n","      <th>date_added</th>\n","      <th>release_year</th>\n","      <th>rating</th>\n","      <th>duration</th>\n","      <th>listed_in</th>\n","      <th>description</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>s1</td>\n","      <td>Movie</td>\n","      <td>Dick Johnson Is Dead</td>\n","      <td>Kirsten Johnson</td>\n","      <td>NaN</td>\n","      <td>United States</td>\n","      <td>September 25, 2021</td>\n","      <td>2020.0</td>\n","      <td>PG-13</td>\n","      <td>90 min</td>\n","      <td>Documentaries</td>\n","      <td>As her father nears the end of his life, filmm...</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>s2</td>\n","      <td>TV Show</td>\n","      <td>Blood &amp; Water</td>\n","      <td>NaN</td>\n","      <td>Ama Qamata, Khosi Ngema, Gail Mabalane, Thaban...</td>\n","      <td>South Africa</td>\n","      <td>September 24, 2021</td>\n","      <td>2021.0</td>\n","      <td>TV-MA</td>\n","      <td>2 Seasons</td>\n","      <td>International TV Shows, TV Dramas, TV Mysteries</td>\n","      <td>After crossing paths at a party, a Cape Town t...</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>s3</td>\n","      <td>TV Show</td>\n","      <td>Ganglands</td>\n","      <td>Julien Leclercq</td>\n","      <td>Sami Bouajila, Tracy Gotoas, Samuel Jouy, Nabi...</td>\n","      <td>NaN</td>\n","      <td>September 24, 2021</td>\n","      <td>2021.0</td>\n","      <td>TV-MA</td>\n","      <td>1 Season</td>\n","      <td>Crime TV Shows, International TV Shows, TV Act...</td>\n","      <td>To protect his family from a powerful drug lor...</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>s4</td>\n","      <td>TV Show</td>\n","      <td>Jailbirds New Orleans</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>September 24, 2021</td>\n","      <td>2021.0</td>\n","      <td>TV-MA</td>\n","      <td>1 Season</td>\n","      <td>Docuseries, Reality TV</td>\n","      <td>Feuds, flirtations and toilet talk go down amo...</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>s5</td>\n","      <td>TV Show</td>\n","      <td>Kota Factory</td>\n","      <td>NaN</td>\n","      <td>Mayur More, Jitendra Kumar, Ranjan Raj, Alam K...</td>\n","      <td>India</td>\n","      <td>September 24, 2021</td>\n","      <td>2021.0</td>\n","      <td>TV-MA</td>\n","      <td>2 Seasons</td>\n","      <td>International TV Shows, Romantic TV Shows, TV ...</td>\n","      <td>In a city of coaching centers known to train I...</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-31bce279-baa6-44b2-acb7-3892464b286a')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-31bce279-baa6-44b2-acb7-3892464b286a button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-31bce279-baa6-44b2-acb7-3892464b286a');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-3874c0df-ae2f-4099-a94c-4a0ed315b23d\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-3874c0df-ae2f-4099-a94c-4a0ed315b23d')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-3874c0df-ae2f-4099-a94c-4a0ed315b23d button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"Netflix","summary":"{\n  \"name\": \"Netflix\",\n  \"rows\": 5398,\n  \"fields\": [\n    {\n      \"column\": \"show_id\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 5398,\n        \"samples\": [\n          \"s2477\",\n          \"s1048\",\n          \"s3165\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"type\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          \"Movie\",\n          \"TV Show\",\n          \"TV Sh\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"title\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 5397,\n        \"samples\": [\n          \"History 101\",\n          \"Peasants Rebellion\",\n          \"Nothing to Lose 2\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"director\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 2721,\n        \"samples\": [\n          \"David 'Tosh' Gitonga, Michael Jones\",\n          \"Ricardo de Montreuil\",\n          \"Alex Timbers\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"cast\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 4749,\n        \"samples\": [\n          \"Louis Koo, Richie Ren, Stanley Fung Sui-Fan, Michelle Ye, Lam Suet, Alexander Chan, Monica Mok\",\n          \"Pooja Bhatt, Shahana Goswami, Amruta Subhash, Plabita Borthakur, Aadhya Anand, Manish Chaudhary, Vivek Gomber, Danish Husain, Rahul Bose, Imaaduddin Shah, Sanghmitra Hitaishi\",\n          \"Wu Kang-ren, Eve Ai, Fu Meng-po, Lin Mei-hsiu, 9m88\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"country\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 475,\n        \"samples\": [\n          \"Canada, Brazil\",\n          \"Spain, Mexico\",\n          \"United States, India, France\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"date_added\",\n      \"properties\": {\n        \"dtype\": \"object\",\n        \"num_unique_values\": 1177,\n        \"samples\": [\n          \"May 27, 2021\",\n          \"April 10, 2019\",\n          \"June 23, 2021\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"release_year\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 7.121457375687673,\n        \"min\": 1925.0,\n        \"max\": 2021.0,\n        \"num_unique_values\": 62,\n        \"samples\": [\n          1954.0,\n          1973.0,\n          2020.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"rating\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 11,\n        \"samples\": [\n          \"TV-Y\",\n          \"PG-13\",\n          \"G\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"duration\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 208,\n        \"samples\": [\n          \"27 min\",\n          \"147 min\",\n          \"150 min\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"listed_in\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 430,\n        \"samples\": [\n          \"Documentaries, Faith & Spirituality\",\n          \"Action & Adventure, Comedies\",\n          \"Action & Adventure, Thrillers\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"description\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 5381,\n        \"samples\": [\n          \"A group of millennials copes with the pressures of adulting by tackling a diverse set of problems from unemployment to cheating.\",\n          \"A former judge in retirement finds and punishes the culprits he could not convict in court, spurring a crime branch officer to investigate.\",\n          \"When they're blackmailed after a hit-and-run, a troubled rich girl and her wild friends stage a fake kidnapping with a plan to collect the ransom.\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":40}]},{"cell_type":"code","source":["# To identify what all columns we have\n","\n","Netflix.columns"],"metadata":{"id":"XomGdJB5VDRx","executionInfo":{"status":"ok","timestamp":1744198455866,"user_tz":-330,"elapsed":7,"user":{"displayName":"","userId":""}},"outputId":"7f03bbdb-f147-49a6-8c62-7c50999c4740","colab":{"base_uri":"https://localhost:8080/"}},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["Index(['show_id', 'type', 'title', 'director', 'cast', 'country', 'date_added',\n","       'release_year', 'rating', 'duration', 'listed_in', 'description'],\n","      dtype='object')"]},"metadata":{},"execution_count":41}]},{"cell_type":"code","source":["# Information about the columns & dataset\n","\n","Netflix.info()"],"metadata":{"id":"lROzn_75VTDm","executionInfo":{"status":"ok","timestamp":1744198533680,"user_tz":-330,"elapsed":26,"user":{"displayName":"","userId":""}},"outputId":"24a02b12-53ae-4c53-b983-1e899a9b58ba","colab":{"base_uri":"https://localhost:8080/"}},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["<class 'pandas.core.frame.DataFrame'>\n","RangeIndex: 5398 entries, 0 to 5397\n","Data columns (total 12 columns):\n"," #   Column        Non-Null Count  Dtype  \n","---  ------        --------------  -----  \n"," 0   show_id       5398 non-null   object \n"," 1   type          5398 non-null   object \n"," 2   title         5397 non-null   object \n"," 3   director      3515 non-null   object \n"," 4   cast          4903 non-null   object \n"," 5   country       4735 non-null   object \n"," 6   date_added    5397 non-null   object \n"," 7   release_year  5397 non-null   float64\n"," 8   rating        5397 non-null   object \n"," 9   duration      5397 non-null   object \n"," 10  listed_in     5397 non-null   object \n"," 11  description   5397 non-null   object \n","dtypes: float64(1), object(11)\n","memory usage: 506.2+ KB\n"]}]},{"cell_type":"markdown","source":["2. Observations on the shape of data, data types of all the attributes, conversion of categorical attributes to 'category' (If required), missing value detection, statistical summary"],"metadata":{"id":"7ZoZdIBJVNvC"}},{"cell_type":"code","source":["# To identify how many rows and columns\n","\n","Netflix.shape"],"metadata":{"id":"EW3A4enuVM8e","executionInfo":{"status":"ok","timestamp":1744198560518,"user_tz":-330,"elapsed":12,"user":{"displayName":"","userId":""}},"outputId":"db836bd8-4ef9-444c-9618-b1e83c286abb","colab":{"base_uri":"https://localhost:8080/"}},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(5398, 12)"]},"metadata":{},"execution_count":43}]},{"cell_type":"code","source":["# To check what are the unique values in Type column\n","\n","Netflix['type'].unique()"],"metadata":{"id":"vStrrkP_WO0g","executionInfo":{"status":"ok","timestamp":1744198786898,"user_tz":-330,"elapsed":6,"user":{"displayName":"","userId":""}},"outputId":"5e50bfe8-1c9e-4db7-b7fb-26e025c77cfd","colab":{"base_uri":"https://localhost:8080/"}},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array(['Movie', 'TV Show', 'TV Sh'], dtype=object)"]},"metadata":{},"execution_count":44}]},{"cell_type":"code","source":["Netflix['type'].value_counts()"],"metadata":{"id":"wpopM8ZEWgzn","executionInfo":{"status":"ok","timestamp":1744198906469,"user_tz":-330,"elapsed":35,"user":{"displayName":"","userId":""}},"outputId":"c6f0209f-93bf-4d63-81c6-f8f903d6bda0","colab":{"base_uri":"https://localhost:8080/","height":209}},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["type\n","Movie      3464\n","TV Show    1933\n","TV Sh         1\n","Name: count, dtype: int64"],"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>count</th>\n","    </tr>\n","    <tr>\n","      <th>type</th>\n","      <th></th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>Movie</th>\n","      <td>3464</td>\n","    </tr>\n","    <tr>\n","      <th>TV Show</th>\n","      <td>1933</td>\n","    </tr>\n","    <tr>\n","      <th>TV Sh</th>\n","      <td>1</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div><br><label><b>dtype:</b> int64</label>"]},"metadata":{},"execution_count":47}]},{"cell_type":"code","source":["# we can drop this row since it does have any information\n","\n","Netflix[Netflix['type'] == 'TV Sh']"],"metadata":{"id":"BUbze809W5Jf","executionInfo":{"status":"ok","timestamp":1744198957378,"user_tz":-330,"elapsed":44,"user":{"displayName":"","userId":""}},"outputId":"b375dbf6-91d7-4cf6-8295-8aedcfaedb05","colab":{"base_uri":"https://localhost:8080/","height":81}},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["     show_id   type title director cast country date_added  release_year  \\\n","5397   s5398  TV Sh   NaN      NaN  NaN     NaN        NaN           NaN   \n","\n","     rating duration listed_in description  \n","5397    NaN      NaN       NaN         NaN  "],"text/html":["\n","  <div id=\"df-57497c30-3d67-46a1-9ab3-4d552fa6988b\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>show_id</th>\n","      <th>type</th>\n","      <th>title</th>\n","      <th>director</th>\n","      <th>cast</th>\n","      <th>country</th>\n","      <th>date_added</th>\n","      <th>release_year</th>\n","      <th>rating</th>\n","      <th>duration</th>\n","      <th>listed_in</th>\n","      <th>description</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>5397</th>\n","      <td>s5398</td>\n","      <td>TV Sh</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-57497c30-3d67-46a1-9ab3-4d552fa6988b')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-57497c30-3d67-46a1-9ab3-4d552fa6988b button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-57497c30-3d67-46a1-9ab3-4d552fa6988b');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","repr_error":"0"}},"metadata":{},"execution_count":48}]},{"cell_type":"code","source":["#Dropping above row\n","Netflix.drop(5397,inplace = True)\n","Netflix['type'].value_counts()"],"metadata":{"id":"1KOcAeYtXLTA","executionInfo":{"status":"ok","timestamp":1744201078395,"user_tz":-330,"elapsed":12,"user":{"displayName":"","userId":""}},"outputId":"bab1f232-cd89-464e-f80c-1a9b16e5ff1e","colab":{"base_uri":"https://localhost:8080/","height":178}},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["type\n","Movie      3464\n","TV Show    1933\n","Name: count, dtype: int64"],"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>count</th>\n","    </tr>\n","    <tr>\n","      <th>type</th>\n","      <th></th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>Movie</th>\n","      <td>3464</td>\n","    </tr>\n","    <tr>\n","      <th>TV Show</th>\n","      <td>1933</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div><br><label><b>dtype:</b> int64</label>"]},"metadata":{},"execution_count":70}]},{"cell_type":"code","source":["#Converting release_year to int type\n","\n","Netflix['release_year']=Netflix['release_year'].astype('int')"],"metadata":{"id":"E2LyGUH_Yk1I"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# To check how many missing values we have in each columns\n","\n","Netflix.isna().sum()"],"metadata":{"id":"tpGJSS8XZyBz","executionInfo":{"status":"ok","timestamp":1744201274426,"user_tz":-330,"elapsed":58,"user":{"displayName":"","userId":""}},"outputId":"4d2e6fb3-cda6-452d-a827-2d3798f48d75","colab":{"base_uri":"https://localhost:8080/","height":460}},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["show_id            0\n","type               0\n","title              0\n","director        1882\n","cast             494\n","country          662\n","date_added         0\n","release_year       0\n","rating             0\n","duration           0\n","listed_in          0\n","description        0\n","dtype: int64"],"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>0</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>show_id</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>type</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>title</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>director</th>\n","      <td>1882</td>\n","    </tr>\n","    <tr>\n","      <th>cast</th>\n","      <td>494</td>\n","    </tr>\n","    <tr>\n","      <th>country</th>\n","      <td>662</td>\n","    </tr>\n","    <tr>\n","      <th>date_added</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>release_year</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>rating</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>duration</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>listed_in</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>description</th>\n","      <td>0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div><br><label><b>dtype:</b> int64</label>"]},"metadata":{},"execution_count":75}]},{"cell_type":"code","source":["#Summary for categorical variables\n","\n","Netflix.describe(include=object)"],"metadata":{"id":"BPiBoDDahgWA","executionInfo":{"status":"ok","timestamp":1744201742969,"user_tz":-330,"elapsed":5,"user":{"displayName":"","userId":""}},"outputId":"3cdc40fe-8a9f-471d-8717-e28514b06fe1","colab":{"base_uri":"https://localhost:8080/","height":192}},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["       show_id   type        title       director  \\\n","count     5397   5397         5397           3515   \n","unique    5397      2         5397           2721   \n","top      s5397  Movie  Lal Patthar  Rajiv Chilaka   \n","freq         1   3464            1             17   \n","\n","                                                     cast        country  \\\n","count                                                4903           4735   \n","unique                                               4749            475   \n","top     Vatsal Dubey, Julie Tejwani, Rupa Bhimani, Jig...  United States   \n","freq                                                   14           1545   \n","\n","             date_added rating  duration        listed_in  \\\n","count              5397   5397      5397             5397   \n","unique             1177     11       208              430   \n","top     October 1, 2018  TV-MA  1 Season  Stand-Up Comedy   \n","freq                 60   2246      1258              239   \n","\n","                                              description  \n","count                                                5397  \n","unique                                               5381  \n","top     Paranormal activity at a lush, abandoned prope...  \n","freq                                                    4  "],"text/html":["\n","  <div id=\"df-f8ec0bf8-40a0-43d4-b65e-301bec04df69\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>show_id</th>\n","      <th>type</th>\n","      <th>title</th>\n","      <th>director</th>\n","      <th>cast</th>\n","      <th>country</th>\n","      <th>date_added</th>\n","      <th>rating</th>\n","      <th>duration</th>\n","      <th>listed_in</th>\n","      <th>description</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>count</th>\n","      <td>5397</td>\n","      <td>5397</td>\n","      <td>5397</td>\n","      <td>3515</td>\n","      <td>4903</td>\n","      <td>4735</td>\n","      <td>5397</td>\n","      <td>5397</td>\n","      <td>5397</td>\n","      <td>5397</td>\n","      <td>5397</td>\n","    </tr>\n","    <tr>\n","      <th>unique</th>\n","      <td>5397</td>\n","      <td>2</td>\n","      <td>5397</td>\n","      <td>2721</td>\n","      <td>4749</td>\n","      <td>475</td>\n","      <td>1177</td>\n","      <td>11</td>\n","      <td>208</td>\n","      <td>430</td>\n","      <td>5381</td>\n","    </tr>\n","    <tr>\n","      <th>top</th>\n","      <td>s5397</td>\n","      <td>Movie</td>\n","      <td>Lal Patthar</td>\n","      <td>Rajiv Chilaka</td>\n","      <td>Vatsal Dubey, Julie Tejwani, Rupa Bhimani, Jig...</td>\n","      <td>United States</td>\n","      <td>October 1, 2018</td>\n","      <td>TV-MA</td>\n","      <td>1 Season</td>\n","      <td>Stand-Up Comedy</td>\n","      <td>Paranormal activity at a lush, abandoned prope...</td>\n","    </tr>\n","    <tr>\n","      <th>freq</th>\n","      <td>1</td>\n","      <td>3464</td>\n","      <td>1</td>\n","      <td>17</td>\n","      <td>14</td>\n","      <td>1545</td>\n","      <td>60</td>\n","      <td>2246</td>\n","      <td>1258</td>\n","      <td>239</td>\n","      <td>4</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-f8ec0bf8-40a0-43d4-b65e-301bec04df69')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-f8ec0bf8-40a0-43d4-b65e-301bec04df69 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-f8ec0bf8-40a0-43d4-b65e-301bec04df69');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-d145656b-c426-4b30-969e-e651ff01a375\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-d145656b-c426-4b30-969e-e651ff01a375')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-d145656b-c426-4b30-969e-e651ff01a375 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","summary":"{\n  \"name\": \"Netflix\",\n  \"rows\": 4,\n  \"fields\": [\n    {\n      \"column\": \"show_id\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          \"5397\",\n          \"s5397\",\n          \"1\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"type\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 4,\n        \"samples\": [\n          2,\n          \"3464\",\n          \"5397\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"title\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          \"5397\",\n          \"Lal Patthar\",\n          \"1\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"director\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 4,\n        \"samples\": [\n          2721,\n          \"17\",\n          \"3515\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"cast\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 4,\n        \"samples\": [\n          4749,\n          \"14\",\n          \"4903\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"country\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 4,\n        \"samples\": [\n          475,\n          \"1545\",\n          \"4735\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"date_added\",\n      \"properties\": {\n        \"dtype\": \"date\",\n        \"min\": \"1970-01-01 00:00:00.000000060\",\n        \"max\": \"2018-10-01 00:00:00\",\n        \"num_unique_values\": 4,\n        \"samples\": [\n          1177,\n          \"60\",\n          \"5397\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"rating\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 4,\n        \"samples\": [\n          11,\n          \"2246\",\n          \"5397\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"duration\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 4,\n        \"samples\": [\n          208,\n          \"1258\",\n          \"5397\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"listed_in\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 4,\n        \"samples\": [\n          430,\n          \"239\",\n          \"5397\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"description\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 4,\n        \"samples\": [\n          5381,\n          \"4\",\n          \"5397\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":85}]},{"cell_type":"code","source":["#Statistical summary for numerical variables\n","\n","Netflix.describe()"],"metadata":{"id":"YGJN5rWnh2NN","executionInfo":{"status":"ok","timestamp":1744201822240,"user_tz":-330,"elapsed":677,"user":{"displayName":"","userId":""}},"outputId":"9bd5d88e-8beb-47ce-a1b9-4754dd4c7012","colab":{"base_uri":"https://localhost:8080/","height":300}},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["       release_year\n","count   5397.000000\n","mean    2016.083936\n","std        7.121457\n","min     1925.000000\n","25%     2016.000000\n","50%     2018.000000\n","75%     2020.000000\n","max     2021.000000"],"text/html":["\n","  <div id=\"df-5b6f890a-f14b-4444-b8e9-9d0a92d3a13e\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>release_year</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>count</th>\n","      <td>5397.000000</td>\n","    </tr>\n","    <tr>\n","      <th>mean</th>\n","      <td>2016.083936</td>\n","    </tr>\n","    <tr>\n","      <th>std</th>\n","      <td>7.121457</td>\n","    </tr>\n","    <tr>\n","      <th>min</th>\n","      <td>1925.000000</td>\n","    </tr>\n","    <tr>\n","      <th>25%</th>\n","      <td>2016.000000</td>\n","    </tr>\n","    <tr>\n","      <th>50%</th>\n","      <td>2018.000000</td>\n","    </tr>\n","    <tr>\n","      <th>75%</th>\n","      <td>2020.000000</td>\n","    </tr>\n","    <tr>\n","      <th>max</th>\n","      <td>2021.000000</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-5b6f890a-f14b-4444-b8e9-9d0a92d3a13e')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-5b6f890a-f14b-4444-b8e9-9d0a92d3a13e button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-5b6f890a-f14b-4444-b8e9-9d0a92d3a13e');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-24b10e10-103c-4990-bb12-f21b765295c0\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-24b10e10-103c-4990-bb12-f21b765295c0')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-24b10e10-103c-4990-bb12-f21b765295c0 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","summary":"{\n  \"name\": \"Netflix\",\n  \"rows\": 8,\n  \"fields\": [\n    {\n      \"column\": \"release_year\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1476.7897451123526,\n        \"min\": 7.121457375687673,\n        \"max\": 5397.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          2016.0839355197331,\n          2018.0,\n          5397.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":86}]},{"cell_type":"markdown","source":["3. Non-Graphical Analysis: Value counts and unique attributes"],"metadata":{"id":"8l-bIx9WgjXY"}},{"cell_type":"code","source":["#Top 5 countries\n","\n","Netflix['country'].value_counts().head()"],"metadata":{"id":"0Us7xIUIgImY","executionInfo":{"status":"ok","timestamp":1744201374136,"user_tz":-330,"elapsed":43,"user":{"displayName":"","userId":""}},"outputId":"57d2f4d8-3896-4a20-dcf8-189dbaacf00a","colab":{"base_uri":"https://localhost:8080/","height":272}},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["country\n","United States     1545\n","India              602\n","Japan              203\n","United Kingdom     190\n","South Korea        138\n","Name: count, dtype: int64"],"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>count</th>\n","    </tr>\n","    <tr>\n","      <th>country</th>\n","      <th></th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>United States</th>\n","      <td>1545</td>\n","    </tr>\n","    <tr>\n","      <th>India</th>\n","      <td>602</td>\n","    </tr>\n","    <tr>\n","      <th>Japan</th>\n","      <td>203</td>\n","    </tr>\n","    <tr>\n","      <th>United Kingdom</th>\n","      <td>190</td>\n","    </tr>\n","    <tr>\n","      <th>South Korea</th>\n","      <td>138</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div><br><label><b>dtype:</b> int64</label>"]},"metadata":{},"execution_count":77}]},{"cell_type":"code","source":["#Unique years\n","\n","Netflix['release_year'].unique()"],"metadata":{"id":"GOxCawOWgclY","executionInfo":{"status":"ok","timestamp":1744201850849,"user_tz":-330,"elapsed":5,"user":{"displayName":"","userId":""}},"outputId":"eeb580b8-fb26-482c-a7b7-577fbba64d2e","colab":{"base_uri":"https://localhost:8080/"}},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([2020, 2021, 1993, 2018, 1996, 1998, 1997, 2010, 2013, 2017, 1975,\n","       1978, 1983, 1987, 2012, 2001, 2014, 2002, 2003, 2004, 2011, 2008,\n","       2009, 2007, 2005, 2006, 1994, 2015, 2019, 2016, 1982, 1989, 1990,\n","       1991, 1999, 1986, 1992, 1984, 1980, 1961, 2000, 1995, 1985, 1976,\n","       1959, 1988, 1981, 1972, 1964, 1945, 1954, 1979, 1958, 1956, 1963,\n","       1970, 1973, 1925, 1974, 1960, 1966, 1971])"]},"metadata":{},"execution_count":87}]},{"cell_type":"code","source":["#Count of movie and Tv shows\n","\n","Netflix['type'].value_counts()"],"metadata":{"id":"dZBmxoOUiLVG","executionInfo":{"status":"ok","timestamp":1744201904797,"user_tz":-330,"elapsed":376,"user":{"displayName":"","userId":""}},"outputId":"d3ff338d-daa0-4852-d39d-5cca6c2c0b85","colab":{"base_uri":"https://localhost:8080/","height":178}},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["type\n","Movie      3464\n","TV Show    1933\n","Name: count, dtype: int64"],"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>count</th>\n","    </tr>\n","    <tr>\n","      <th>type</th>\n","      <th></th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>Movie</th>\n","      <td>3464</td>\n","    </tr>\n","    <tr>\n","      <th>TV Show</th>\n","      <td>1933</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div><br><label><b>dtype:</b> int64</label>"]},"metadata":{},"execution_count":88}]},{"cell_type":"code","source":["# Top 5 Rated Films\n","\n","Netflix['rating'].value_counts().head()"],"metadata":{"id":"xmrWZhebiWDe","executionInfo":{"status":"ok","timestamp":1744201959278,"user_tz":-330,"elapsed":521,"user":{"displayName":"","userId":""}},"outputId":"34ce6a82-a828-4c19-a299-d4bdc4d4d3b2","colab":{"base_uri":"https://localhost:8080/","height":272}},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["rating\n","TV-MA    2246\n","TV-14    1373\n","TV-PG     465\n","R         367\n","TV-Y      230\n","Name: count, dtype: int64"],"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>count</th>\n","    </tr>\n","    <tr>\n","      <th>rating</th>\n","      <th></th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>TV-MA</th>\n","      <td>2246</td>\n","    </tr>\n","    <tr>\n","      <th>TV-14</th>\n","      <td>1373</td>\n","    </tr>\n","    <tr>\n","      <th>TV-PG</th>\n","      <td>465</td>\n","    </tr>\n","    <tr>\n","      <th>R</th>\n","      <td>367</td>\n","    </tr>\n","    <tr>\n","      <th>TV-Y</th>\n","      <td>230</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div><br><label><b>dtype:</b> int64</label>"]},"metadata":{},"execution_count":90}]},{"cell_type":"code","source":["#list of unique ratings\n","\n","Netflix['rating'].unique()"],"metadata":{"id":"mTQV4_llihm9","executionInfo":{"status":"ok","timestamp":1744202071922,"user_tz":-330,"elapsed":4,"user":{"displayName":"","userId":""}},"outputId":"723a59d6-0841-43d4-b432-1ecc1b3d7526","colab":{"base_uri":"https://localhost:8080/"}},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array(['PG-13', 'TV-MA', 'PG', 'TV-14', 'TV-PG', 'TV-Y', 'TV-Y7', 'R',\n","       'TV-G', 'G', 'NC-17'], dtype=object)"]},"metadata":{},"execution_count":92}]},{"cell_type":"markdown","source":["4. Visual Analysis - Univariate, Bivariate after pre-processing of the data"],"metadata":{"id":"V4scVFo7i0Xh"}},{"cell_type":"code","source":["sns.kdeplot(data=Netflix,x='release_year')\n","\n","# By looking at this graph we can say we only have recent years data (After 2000)"],"metadata":{"id":"vfngIzq7izs2","executionInfo":{"status":"ok","timestamp":1744202135559,"user_tz":-330,"elapsed":1759,"user":{"displayName":"","userId":""}},"outputId":"d9a25cf0-986b-4e0a-a4bd-e53a27e8791c","colab":{"base_uri":"https://localhost:8080/","height":472}},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<Axes: xlabel='release_year', ylabel='Density'>"]},"metadata":{},"execution_count":96},{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"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2LlzJyZNmmSXKyGqqqrC5MmTMWjQIPzlL39xf4W9SFvaduvWrdixYweys7PlrawXaUu7Wq1WAMBTTz2FtLQ0DB06FH/9619xyy23YPXq1XJW36O19e+DV155BRUVFfjPf/6DQ4cOISMjA4888giOHTsmY+09yzPPPIPjx49jw4YNclfF5zijbY8fP477778fCxcuxIQJE5xYO/diANRBw4cPx5EjR1BRUYErV64gJycHV69eRd++fe3KVVdXY+LEiQgNDcXmzZsREBAgnYuOjm42k0F839Kwjr+4Udvu2LED586dQ6dOnaBWq6UhxQcffFAaTmDbNnejdu3evTsAYNCgQXafGzhwIAoLCwHY2q6kpMTuvNlsRnl5ud+2K3Djtj137hyWL1+O1atXY/z48RgyZAgWLlyIESNGSInV/t626enp2LZtG3bu3ImePXtKx6Ojo2EymVBRUWFXvri4WGqXtvy+t1YmLCwMgYGBzn4cj9KRthWdPHkS48ePx5NPPon58+fbnfO2tmUA5CTh4eHo2rUrzp49i0OHDtkNyVRVVWHChAnQaDTYunVrs13pk5KScOzYMbu/9LZv346wsLBmX0L+qLW2nTdvHo4ePYojR45ILwD461//ijVr1gBg215Pa+0aFxeHHj16NJsme+bMGfTu3RuArV0rKiqQn58vnd+xYwesVisSExPd9xAeqrW2ra2tBYBmPcQqlUrqefPXthUEAenp6di8eTN27NiBPn362J0fPnw4AgICkJubKx07ffo0CgsLkZSUBKBtv+9JSUl21xDLiNfwRc5oWwA4ceIE7r77bsycOROvv/56s/t4XdvKnYXt6aqrq4XDhw8Lhw8fFgAIS5cuFQ4fPixcvHhREATbjK6dO3cK586dE7Zs2SL07t1bmDJlivT5yspKITExUYiPjxd++OEH4cqVK9LLbDYLgiAIZrNZGDx4sDBhwgThyJEjQk5OjtC1a1chMzNTlmd2l462bUvwi5k5/ti2zmjXv/71r0JYWJiwadMm4ezZs8L8+fMFnU4n/PDDD1KZiRMnCkOHDhX2798vfPPNN0L//v2FadOmufVZ3a2jbWsymYR+/foJd955p7B//37hhx9+EBYvXiwoFArh888/l8r5Y9v+4Q9/EMLDw4Vdu3bZ/T1ZW1srlfn9738v9OrVS9ixY4dw6NAhISkpSUhK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\n"},"metadata":{}}]},{"cell_type":"code","source":["sns.countplot(data=Netflix,x='type')\n","\n","# Netflix has release more movies than Tv Shows"],"metadata":{"id":"uB7_nynpkE2i","executionInfo":{"status":"ok","timestamp":1744202408822,"user_tz":-330,"elapsed":1266,"user":{"displayName":"","userId":""}},"outputId":"471393f1-2480-41f2-c5ef-54e60a53a2c6","colab":{"base_uri":"https://localhost:8080/","height":466}},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<Axes: xlabel='type', ylabel='count'>"]},"metadata":{},"execution_count":97},{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":["Tv_show = Netflix[Netflix['type'] == 'TV Show']\n","Movie = Netflix[Netflix['type'] == 'Movie']\n","\n","sns.countplot(data=Tv_show,x='duration',order=Tv_show['duration'].value_counts().keys())\n","plt.xticks(rotation=90)\n","plt.show()\n","\n","# Most of the Tv show's have realeased only one season"],"metadata":{"id":"urxTX0JRkYHH","executionInfo":{"status":"ok","timestamp":1744202737848,"user_tz":-330,"elapsed":702,"user":{"displayName":"","userId":""}},"outputId":"71030e2a-a0cd-426e-9a15-24dd5d423490","colab":{"base_uri":"https://localhost:8080/","height":515}},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":["Top =Netflix[Netflix['country'].isin(Netflix['country'].value_counts().head().index)]\n","Top.groupby(['country','type'])['show_id'].count()"],"metadata":{"id":"GLWRWjSAsN4l","executionInfo":{"status":"ok","timestamp":1744204524011,"user_tz":-330,"elapsed":438,"user":{"displayName":"","userId":""}},"outputId":"12e208ed-34e8-4ff4-b035-1befd5174a14","colab":{"base_uri":"https://localhost:8080/","height":429}},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["country         type   \n","India           Movie      557\n","                TV Show     45\n","Japan           Movie       62\n","                TV Show    141\n","South Korea     Movie       27\n","                TV Show    111\n","United Kingdom  Movie       81\n","                TV Show    109\n","United States   Movie      969\n","                TV Show    576\n","Name: show_id, dtype: int64"],"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th></th>\n","      <th>show_id</th>\n","    </tr>\n","    <tr>\n","      <th>country</th>\n","      <th>type</th>\n","      <th></th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th rowspan=\"2\" valign=\"top\">India</th>\n","      <th>Movie</th>\n","      <td>557</td>\n","    </tr>\n","    <tr>\n","      <th>TV Show</th>\n","      <td>45</td>\n","    </tr>\n","    <tr>\n","      <th rowspan=\"2\" valign=\"top\">Japan</th>\n","      <th>Movie</th>\n","      <td>62</td>\n","    </tr>\n","    <tr>\n","      <th>TV Show</th>\n","      <td>141</td>\n","    </tr>\n","    <tr>\n","      <th rowspan=\"2\" valign=\"top\">South Korea</th>\n","      <th>Movie</th>\n","      <td>27</td>\n","    </tr>\n","    <tr>\n","      <th>TV Show</th>\n","      <td>111</td>\n","    </tr>\n","    <tr>\n","      <th rowspan=\"2\" valign=\"top\">United Kingdom</th>\n","      <th>Movie</th>\n","      <td>81</td>\n","    </tr>\n","    <tr>\n","      <th>TV Show</th>\n","      <td>109</td>\n","    </tr>\n","    <tr>\n","      <th rowspan=\"2\" valign=\"top\">United States</th>\n","      <th>Movie</th>\n","      <td>969</td>\n","    </tr>\n","    <tr>\n","      <th>TV Show</th>\n","      <td>576</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div><br><label><b>dtype:</b> int64</label>"]},"metadata":{},"execution_count":134}]},{"cell_type":"markdown","source":["#Business Insights & Recommondations\n","\n","1.Release More Movies Than TV Shows\n","\n","2.Targeted Countries:\n","United States,India,Japan,United Kingdom,South Korea\n","\n","3.Targeted Ratings: TV-MA\n","\n","4.Focus by Region:\n","\n","India: Focus on Movies\n","\n","Japan: Focus on TV Shows.\n","\n","South Korea: Focus on TV Shows.\n","\n","United States: Focus on Movies.\n","\n","United Kingdom: Focus on Both (Movies and TV Shows).\n"],"metadata":{"id":"N47qr087oDRP"}},{"cell_type":"code","source":[],"metadata":{"id":"P9luycUrmM5j"},"execution_count":null,"outputs":[]}],"metadata":{"colab":{"provenance":[{"file_id":"/v2/external/notebooks/intro.ipynb","timestamp":1744204637190}]},"kernelspec":{"display_name":"Python 3","name":"python3"}},"nbformat":4,"nbformat_minor":0}